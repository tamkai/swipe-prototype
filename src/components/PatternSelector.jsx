import './PatternSelector.css';

const PatternSelector = ({ onSelectPattern }) => {
  const patterns = [
    {
      id: 'pattern1',
      name: 'Ê°à1: „Ç∑„É≥„Éó„É´YES/NO',
      description: 'Ë≥™Âïè„Å´ÂØæ„Åó„Å¶YES/NO„ÅßÂõûÁ≠î„ÄÇ„Çπ„ÉØ„Ç§„Éó„Åæ„Åü„ÅØ„Éú„Çø„É≥„ÅßÈÅ∏Êäû',
      preview: '‚úì',
      category: 'UI„Éë„Çø„Éº„É≥'
    },
    {
      id: 'pattern2',
      name: 'Ê°à2: „Ç®„É≥„Ç´„É¨„ÉÉ„Ç∏„É°„É≥„Éà',
      description: 'Ê°à1 + ÂõûÁ≠îÊôÇ„Å´„ÉÜ„É≥„Ç∑„Éß„É≥„Åå‰∏ä„Åå„Çã„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫',
      preview: '‚ú®',
      category: 'UI„Éë„Çø„Éº„É≥'
    },
    {
      id: 'pattern3',
      name: 'Ê°à3: Ë¶ñË¶ö„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ',
      description: 'Ê°à1 + YES/NO/SKIPË°®Á§∫ + „Ç´„Éº„ÉâÊû†Á∑ö„ÅßÂõûÁ≠î„ÇíÂº∑Ë™ø',
      preview: 'üí´',
      category: 'UI„Éë„Çø„Éº„É≥'
    },
    {
      id: 'assessmentA',
      name: 'Ê°àA: YES/NO/BOTH',
      description: '„Ç¢„Çª„Çπ„É°„É≥„ÉàÁî®„ÄÇYES/NO/‰∏°ÊñπÂΩì„Å¶„ÅØ„Åæ„Çã „ÅÆ3Êäû',
      preview: 'üîç',
      category: '„Ç¢„Çª„Çπ„É°„É≥„Éà'
    },
    {
      id: 'assessmentB',
      name: 'Ê°àB: „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàË°®Ë®ò',
      description: '„Ç¢„Çª„Çπ„É°„É≥„ÉàÁî®„ÄÇË≥™Âïè„Åî„Å®„ÅÆÈÅ∏ÊäûËÇ¢„É©„Éô„É´„ÇíË°®Á§∫',
      preview: 'üìä',
      category: '„Ç¢„Çª„Çπ„É°„É≥„Éà'
    },
    {
      id: 'assessmentC',
      name: 'Ê°àC: Ë°åÂãï„Éô„Éº„Çπ',
      description: 'ÂÖ∑‰ΩìÁöÑ„Å™Ë°åÂãï„Éª„Ç∑„Éº„É≥„ÅßËÅû„ÅèÔºà16ÂïèÔºâ',
      preview: 'üé¨',
      category: '„Ç¢„Çª„Çπ„É°„É≥„Éà'
    },
    {
      id: 'assessmentD',
      name: 'Ê°àD: ‰∏°Ê•µÊØîËºÉ+ÂèçËª¢È†ÖÁõÆ',
      description: '„ÄåA„Çà„Çä„ÇÇB„ÄçÂΩ¢Âºè + Êï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØÔºà32ÂïèÔºâ',
      preview: '‚öñÔ∏è',
      category: '„Ç¢„Çª„Çπ„É°„É≥„Éà'
    },
    {
      id: 'keywordSwipe',
      name: 'Ê°àF: „Ç≠„Éº„ÉØ„Éº„Éâ„Çπ„ÉØ„Ç§„Éó ‚≠ê',
      description: '32ÂÄã„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Å´Áõ¥ÊÑüÁöÑ„Å´ÂèçÂøúÔºàÂéüÁÇπÂõûÂ∏∞ÁâàÔºâ',
      preview: '‚ú®',
      category: '„Ç¢„Çª„Çπ„É°„É≥„Éà'
    },
    {
      id: 'debugResults',
      name: 'üîß ÁµêÊûúÁîªÈù¢„Å´È£õ„Å∂Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ',
      description: '„ÉÄ„Éü„Éº„Éá„Éº„Çø„ÅßÁµêÊûúÁîªÈù¢„ÇíË°®Á§∫',
      preview: 'üîç',
      category: '„Éá„Éê„ÉÉ„Ç∞'
    },
    {
      id: 'sliderTest',
      name: 'üéöÔ∏è „Çπ„É©„Ç§„ÉÄ„ÉºUI„ÉÜ„Çπ„Éà',
      description: 'ÂÜÜÂΩ¢„Çπ„É©„Ç§„ÉÄ„Éº„ÅÆË¶ã„ÅüÁõÆ„Å®Êìç‰ΩúÊÑü„ÇíÁ¢∫Ë™ç',
      preview: '‚öôÔ∏è',
      category: '„Éá„Éê„ÉÉ„Ç∞'
    },
    {
      id: 'resultsTest',
      name: 'üìä ÁµêÊûúÁîªÈù¢„ÉÜ„Çπ„Éà',
      description: 'Creative CompassÁµêÊûúÁîªÈù¢„ÅÆ„É¢„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó',
      preview: 'üß≠',
      category: '„Éá„Éê„ÉÉ„Ç∞'
    },
    {
      id: 'integratedDiagnosis',
      name: 'AFFLATUSÂâµÈÄ†ÊÄßË®∫Êñ≠ ‚≠êNEW',
      description: '„Çø„Ç§„Éó1ÔºàÁõ¥ÊÑüÂà§Êñ≠Ôºâ‚Üí „Çø„Ç§„Éó2ÔºàËá™Â∑±Ë™çË≠òÔºâ„ÅÆÁµ±ÂêàË®∫Êñ≠',
      preview: 'logo',
      category: 'Ë®∫Êñ≠'
    },
    {
      id: 'type2Diagnosis',
      name: 'üß† „Çø„Ç§„Éó2Ë®∫Êñ≠ÔºàËá™Â∑±Ë™çË≠òÔºâ',
      description: '8Ëª∏„Çí1„Å§„Åö„Å§Ë™¨Êòé„ÇíË™≠„Åø„Å™„Åå„ÇâËá™Â∑±Ë©ï‰æ°',
      preview: 'üéöÔ∏è',
      category: 'Ë®∫Êñ≠'
    }
  ];

  const uiPatterns = patterns.filter(p => p.category === 'UI„Éë„Çø„Éº„É≥');
  const assessmentPatterns = patterns.filter(p => p.category === '„Ç¢„Çª„Çπ„É°„É≥„Éà');
  const debugPatterns = patterns.filter(p => p.category === '„Éá„Éê„ÉÉ„Ç∞');
  const diagnosisPatterns = patterns.filter(p => p.category === 'Ë®∫Êñ≠');

  return (
    <div className="pattern-selector">
      <div className="pattern-header">
        <h1>„Çπ„ÉØ„Ç§„ÉóUI„ÉÜ„Çπ„Éà</h1>
        <p>„Éë„Çø„Éº„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
      </div>

      {/* Ë®∫Êñ≠„Éë„Çø„Éº„É≥ */}
      {diagnosisPatterns.length > 0 && (
        <div className="pattern-section">
          <h2 style={{ color: 'white', fontSize: '20px', marginBottom: '16px' }}>ÂâµÈÄ†ÊÄßË®∫Êñ≠</h2>
          <div className="pattern-grid">
            {diagnosisPatterns.map((pattern) => (
              <button
                key={pattern.id}
                className="pattern-card"
                onClick={() => onSelectPattern(pattern.id)}
                style={{
                  backgroundColor: 'rgba(255, 255, 255, 0.95)',
                  borderColor: 'rgba(102, 126, 234, 0.6)',
                  borderWidth: '2px',
                  color: '#1f2937'
                }}
              >
                <div className="pattern-preview" style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}>
                  {pattern.preview === 'logo' ? (
                    <svg width="60" height="auto" viewBox="0 0 230.68 313.8" fill="#000000">
                      <g>
                        <circle cx="147.08" cy="88.77" r="63.61"/>
                        <circle cx="60.14" cy="172.72" r="37.49"/>
                        <circle cx="120.93" cy="219.87" r="21.24"/>
                      </g>
                      <g>
                        <path d="M52.88,291.67h-7.06l-.96,5.13h-5.13l5.78-30.81h7.7l5.78,30.81h-5.13l-.96-5.13ZM51.91,286.54l-2.57-13.69-2.57,13.69h5.13Z"/>
                        <path d="M68.75,271.13v6.42h8.99v5.13h-8.99v14.12h-5.13v-30.81h15.4v5.13h-10.27Z"/>
                        <path d="M88.79,271.13v6.42h8.99v5.13h-8.99v14.12h-5.13v-30.81h15.4v5.13h-10.27Z"/>
                        <path d="M115.37,291.67v5.13h-12.84v-30.81h5.13v25.67h7.7Z"/>
                        <path d="M132.01,291.67h-7.06l-.96,5.13h-5.13l5.78-30.81h7.7l5.78,30.81h-5.13l-.96-5.13ZM131.05,286.54l-2.57-13.69-2.57,13.69h5.13Z"/>
                        <path d="M154.67,271.13h-5.13v25.67h-5.13v-25.67h-5.13v-5.13h15.4v5.13Z"/>
                        <path d="M173.56,266v23.11c0,4.25-3.45,7.7-7.7,7.7s-7.7-3.45-7.7-7.7v-23.11h5.13v23.11c0,1.42,1.15,2.57,2.57,2.57s2.57-1.15,2.57-2.57v-23.11h5.13Z"/>
                        <path d="M193.61,289.1c0,4.25-3.45,7.7-7.7,7.7s-7.7-3.45-7.7-7.7v-2.57h5.13v2.57c0,1.42,1.15,2.57,2.57,2.57s2.57-1.15,2.57-2.57c0,0,0-.46-.11-.94-.09-.43-.71-2.25-3.91-4.86-6.76-5.51-6.25-8.68-6.25-9.61,0-4.25,3.45-7.7,7.7-7.7s7.7,3.45,7.7,7.7v2.57h-5.13v-2.57c0-1.42-1.15-2.57-2.57-2.57s-2.57,1.15-2.57,2.57c0,0,0,.46.11.94.09.43.71,2.25,3.91,4.86,6.76,5.51,6.25,8.68,6.25,9.61Z"/>
                      </g>
                    </svg>
                  ) : (
                    pattern.preview
                  )}
                </div>
                <h3>{pattern.name}</h3>
                <p>{pattern.description}</p>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* „Ç¢„Çª„Çπ„É°„É≥„Éà„Éë„Çø„Éº„É≥ */}
      <div className="pattern-section">
        <h2 style={{ color: 'white', fontSize: '20px', marginBottom: '16px', marginTop: '32px' }}>„Ç¢„Çª„Çπ„É°„É≥„ÉàÁâà</h2>
        <div className="pattern-grid">
          {assessmentPatterns.map((pattern) => (
            <button
              key={pattern.id}
              className="pattern-card"
              onClick={() => onSelectPattern(pattern.id)}
            >
              <div className="pattern-preview">{pattern.preview}</div>
              <h3>{pattern.name}</h3>
              <p>{pattern.description}</p>
            </button>
          ))}
        </div>

        {/* „Éá„Éê„ÉÉ„Ç∞„Éú„Çø„É≥ */}
        {debugPatterns.length > 0 && (
          <div style={{ marginTop: '16px' }}>
            {debugPatterns.map((pattern) => (
              <button
                key={pattern.id}
                className="pattern-card"
                onClick={() => onSelectPattern(pattern.id)}
                style={{
                  backgroundColor: 'rgba(255, 193, 7, 0.1)',
                  borderColor: 'rgba(255, 193, 7, 0.3)'
                }}
              >
                <div className="pattern-preview">{pattern.preview}</div>
                <h3>{pattern.name}</h3>
                <p>{pattern.description}</p>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* UI„Éë„Çø„Éº„É≥ */}
      <div className="pattern-section">
        <h2 style={{ color: 'white', fontSize: '20px', marginBottom: '16px', marginTop: '32px' }}>UI„Éë„Çø„Éº„É≥Ôºà„Ç¢„Éº„Ç´„Ç§„ÉñÔºâ</h2>
        <div className="pattern-grid">
          {uiPatterns.map((pattern) => (
            <button
              key={pattern.id}
              className="pattern-card"
              onClick={() => onSelectPattern(pattern.id)}
            >
              <div className="pattern-preview">{pattern.preview}</div>
              <h3>{pattern.name}</h3>
              <p>{pattern.description}</p>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default PatternSelector;
